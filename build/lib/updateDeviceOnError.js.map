{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceOnError.ts"],
  "sourcesContent": ["import { saveValue } from './saveValue';\r\nimport { initStore } from './store';\r\nimport { errorLogger } from './logging';\r\nimport type { MidasAquatemp } from '../main';\r\nimport { request } from './axios';\r\nimport { getHeaders } from './axiosParameter';\r\nimport type { MidasData } from '../types/types';\r\n\r\nexport async function updateDeviceErrorMsg(adapter: MidasAquatemp): Promise<void> {\r\n    const store = initStore();\r\n    try {\r\n        const { token, apiLevel, cloudURL, device: deviceCode } = store;\r\n        if (!token) {\r\n            return;\r\n        }\r\n        const sURL =\r\n            apiLevel < 3\r\n                ? `${cloudURL}/app/device/getFaultDataByDeviceCode.json`\r\n                : `${cloudURL}/app/device/getFaultDataByDeviceCode`;\r\n\r\n        const { data, error } = await request<MidasData>(\r\n            adapter,\r\n            sURL,\r\n            {\r\n                device_code: deviceCode,\r\n                deviceCode: deviceCode,\r\n            },\r\n            getHeaders(token),\r\n        );\r\n\r\n        if (!data || error) {\r\n            store.resetOnErrorHandler();\r\n            return;\r\n        }\r\n\r\n        await saveValue({ key: 'error', value: true, stateType: 'boolean', adapter: adapter });\r\n        await saveValue({\r\n            key: 'errorMessage',\r\n            value: data.objectResult?.[0]?.description ?? data.object_result?.[0]?.description ?? '',\r\n            stateType: 'string',\r\n            adapter: adapter,\r\n        });\r\n        await saveValue({\r\n            key: 'errorCode',\r\n            value: data.objectResult?.[0]?.faultCode ?? data.object_result?.[0]?.fault_code,\r\n            stateType: 'string',\r\n            adapter: adapter,\r\n        });\r\n        await saveValue({\r\n            key: 'errorLevel',\r\n            value: data.objectResult?.[0]?.errorLevel ?? data.object_result?.[0]?.error_level,\r\n            stateType: 'string',\r\n            adapter: adapter,\r\n        });\r\n    } catch (error: any) {\r\n        errorLogger('Error in updateDeviceErrorMsg', error, adapter);\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA0B;AAC1B,mBAA0B;AAC1B,qBAA4B;AAE5B,mBAAwB;AACxB,4BAA2B;AAG3B,eAAsB,qBAAqB,SAAuC;AARlF;AASI,QAAM,YAAQ,wBAAU;AACxB,MAAI;AACA,UAAM,EAAE,OAAO,UAAU,UAAU,QAAQ,WAAW,IAAI;AAC1D,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,UAAM,OACF,WAAW,IACL,GAAG,QAAQ,8CACX,GAAG,QAAQ;AAErB,UAAM,EAAE,MAAM,MAAM,IAAI,UAAM;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,QACI,aAAa;AAAA,QACb;AAAA,MACJ;AAAA,UACA,kCAAW,KAAK;AAAA,IACpB;AAEA,QAAI,CAAC,QAAQ,OAAO;AAChB,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AAEA,cAAM,4BAAU,EAAE,KAAK,SAAS,OAAO,MAAM,WAAW,WAAW,QAAiB,CAAC;AACrF,cAAM,4BAAU;AAAA,MACZ,KAAK;AAAA,MACL,QAAO,4BAAK,iBAAL,mBAAoB,OAApB,mBAAwB,gBAAxB,aAAuC,gBAAK,kBAAL,mBAAqB,OAArB,mBAAyB,gBAAhE,YAA+E;AAAA,MACtF,WAAW;AAAA,MACX;AAAA,IACJ,CAAC;AACD,cAAM,4BAAU;AAAA,MACZ,KAAK;AAAA,MACL,QAAO,sBAAK,iBAAL,mBAAoB,OAApB,mBAAwB,cAAxB,aAAqC,gBAAK,kBAAL,mBAAqB,OAArB,mBAAyB;AAAA,MACrE,WAAW;AAAA,MACX;AAAA,IACJ,CAAC;AACD,cAAM,4BAAU;AAAA,MACZ,KAAK;AAAA,MACL,QAAO,sBAAK,iBAAL,mBAAoB,OAApB,mBAAwB,eAAxB,aAAsC,gBAAK,kBAAL,mBAAqB,OAArB,mBAAyB;AAAA,MACtE,WAAW;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL,SAAS,OAAY;AACjB,oCAAY,iCAAiC,OAAO,OAAO;AAAA,EAC/D;AACJ;",
  "names": []
}
