{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceOnError.ts"],
  "sourcesContent": ["import { saveValue } from './saveValue';\nimport { initStore } from './store';\nimport { errorLogger } from './logging';\nimport type { MidasAquatemp } from '../main';\nimport { request } from './axios';\nimport { getHeaders } from './axiosParameter';\nimport type { MidasData } from '../types/types';\nimport { noError } from './utils';\n\nexport async function updateDeviceErrorMsg(adapter: MidasAquatemp): Promise<void> {\n    const store = initStore();\n    try {\n        const { token, apiLevel, cloudURL, device: deviceCode } = store;\n        if (!token) {\n            return;\n        }\n        const sURL =\n            apiLevel < 3\n                ? `${cloudURL}/app/device/getFaultDataByDeviceCode.json`\n                : `${cloudURL}/app/device/getFaultDataByDeviceCode`;\n\n        const { data } = await request<MidasData>(\n            adapter,\n            sURL,\n            {\n                device_code: deviceCode,\n                deviceCode: deviceCode,\n            },\n            getHeaders(token),\n        );\n\n        if (!data || !noError(data.error_code)) {\n            store.resetOnErrorHandler();\n            return;\n        }\n\n        await saveValue({ key: 'error', value: true, stateType: 'boolean', adapter: adapter });\n        await saveValue({\n            key: 'errorMessage',\n            value: data.objectResult?.[0]?.description ?? data.object_result?.[0]?.description ?? '',\n            stateType: 'string',\n            adapter: adapter,\n        });\n        await saveValue({\n            key: 'errorCode',\n            value: data.objectResult?.[0]?.faultCode ?? data.object_result?.[0]?.fault_code,\n            stateType: 'string',\n            adapter: adapter,\n        });\n        await saveValue({\n            key: 'errorLevel',\n            value: data.objectResult?.[0]?.errorLevel ?? data.object_result?.[0]?.error_level,\n            stateType: 'string',\n            adapter: adapter,\n        });\n    } catch (error: any) {\n        errorLogger('Error in updateDeviceErrorMsg', error, adapter);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA0B;AAC1B,mBAA0B;AAC1B,qBAA4B;AAE5B,mBAAwB;AACxB,4BAA2B;AAE3B,mBAAwB;AAExB,eAAsB,qBAAqB,SAAuC;AATlF;AAUI,QAAM,YAAQ,wBAAU;AACxB,MAAI;AACA,UAAM,EAAE,OAAO,UAAU,UAAU,QAAQ,WAAW,IAAI;AAC1D,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,UAAM,OACF,WAAW,IACL,GAAG,QAAQ,8CACX,GAAG,QAAQ;AAErB,UAAM,EAAE,KAAK,IAAI,UAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,QACI,aAAa;AAAA,QACb;AAAA,MACJ;AAAA,UACA,kCAAW,KAAK;AAAA,IACpB;AAEA,QAAI,CAAC,QAAQ,KAAC,sBAAQ,KAAK,UAAU,GAAG;AACpC,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AAEA,cAAM,4BAAU,EAAE,KAAK,SAAS,OAAO,MAAM,WAAW,WAAW,QAAiB,CAAC;AACrF,cAAM,4BAAU;AAAA,MACZ,KAAK;AAAA,MACL,QAAO,4BAAK,iBAAL,mBAAoB,OAApB,mBAAwB,gBAAxB,aAAuC,gBAAK,kBAAL,mBAAqB,OAArB,mBAAyB,gBAAhE,YAA+E;AAAA,MACtF,WAAW;AAAA,MACX;AAAA,IACJ,CAAC;AACD,cAAM,4BAAU;AAAA,MACZ,KAAK;AAAA,MACL,QAAO,sBAAK,iBAAL,mBAAoB,OAApB,mBAAwB,cAAxB,aAAqC,gBAAK,kBAAL,mBAAqB,OAArB,mBAAyB;AAAA,MACrE,WAAW;AAAA,MACX;AAAA,IACJ,CAAC;AACD,cAAM,4BAAU;AAAA,MACZ,KAAK;AAAA,MACL,QAAO,sBAAK,iBAAL,mBAAoB,OAApB,mBAAwB,eAAxB,aAAsC,gBAAK,kBAAL,mBAAqB,OAArB,mBAAyB;AAAA,MACtE,WAAW;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL,SAAS,OAAY;AACjB,oCAAY,iCAAiC,OAAO,OAAO;AAAA,EAC/D;AACJ;",
  "names": []
}
