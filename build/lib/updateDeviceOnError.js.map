{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceOnError.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport { saveValue } from './saveValue';\nimport { initStore } from './store';\nimport { errorLogger } from './logging';\nimport type { MidasAquatemp } from '../main';\n\nexport async function updateDeviceErrorMsg(adapter: MidasAquatemp): Promise<void> {\n    const store = initStore();\n    try {\n        const { token, apiLevel, cloudURL, device: deviceCode } = store;\n        if (token) {\n            const sURL =\n                apiLevel < 3\n                    ? `${cloudURL}/app/device/getFaultDataByDeviceCode.json`\n                    : `${cloudURL}/app/device/getFaultDataByDeviceCode`;\n\n            const response = await axios.post(\n                sURL,\n                {\n                    device_code: deviceCode,\n                    deviceCode: deviceCode,\n                },\n                {\n                    headers: { 'x-token': token },\n                },\n            );\n\n            if (parseInt(response.data.error_code) == 0) {\n                await saveValue('error', true, 'boolean', adapter);\n\n                if (apiLevel < 3) {\n                    await saveValue(\n                        'errorMessage',\n                        response.data.object_result[0]?.description ?? '',\n                        'string',\n                        adapter,\n                    );\n                    await saveValue('errorCode', response.data.object_result[0]?.fault_code, 'string', adapter);\n                    await saveValue('errorLevel', response.data.object_result[0]?.error_level, 'string', adapter);\n                    return;\n                }\n                await saveValue('errorMessage', response.data.objectResult[0]?.description ?? '', 'string', adapter);\n                await saveValue('errorCode', response.data.objectResult[0]?.fault_code, 'string', adapter);\n                await saveValue('errorLevel', response.data.objectResult[0]?.error_level, 'string', adapter);\n                return;\n            }\n            // Login-Fehler\n            store.resetOnErrorHandler();\n            return;\n        }\n        return;\n    } catch (error: any) {\n        errorLogger('Error in updateDeviceErrorMsg', error, adapter);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,uBAA0B;AAC1B,mBAA0B;AAC1B,qBAA4B;AAG5B,eAAsB,qBAAqB,SAAuC;AANlF;AAOI,QAAM,YAAQ,wBAAU;AACxB,MAAI;AACA,UAAM,EAAE,OAAO,UAAU,UAAU,QAAQ,WAAW,IAAI;AAC1D,QAAI,OAAO;AACP,YAAM,OACF,WAAW,IACL,GAAG,QAAQ,8CACX,GAAG,QAAQ;AAErB,YAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,QACzB;AAAA,QACA;AAAA,UACI,aAAa;AAAA,UACb;AAAA,QACJ;AAAA,QACA;AAAA,UACI,SAAS,EAAE,WAAW,MAAM;AAAA,QAChC;AAAA,MACJ;AAEA,UAAI,SAAS,SAAS,KAAK,UAAU,KAAK,GAAG;AACzC,kBAAM,4BAAU,SAAS,MAAM,WAAW,OAAO;AAEjD,YAAI,WAAW,GAAG;AACd,oBAAM;AAAA,YACF;AAAA,aACA,oBAAS,KAAK,cAAc,CAAC,MAA7B,mBAAgC,gBAAhC,YAA+C;AAAA,YAC/C;AAAA,YACA;AAAA,UACJ;AACA,oBAAM,4BAAU,cAAa,cAAS,KAAK,cAAc,CAAC,MAA7B,mBAAgC,YAAY,UAAU,OAAO;AAC1F,oBAAM,4BAAU,eAAc,cAAS,KAAK,cAAc,CAAC,MAA7B,mBAAgC,aAAa,UAAU,OAAO;AAC5F;AAAA,QACJ;AACA,kBAAM,4BAAU,iBAAgB,oBAAS,KAAK,aAAa,CAAC,MAA5B,mBAA+B,gBAA/B,YAA8C,IAAI,UAAU,OAAO;AACnG,kBAAM,4BAAU,cAAa,cAAS,KAAK,aAAa,CAAC,MAA5B,mBAA+B,YAAY,UAAU,OAAO;AACzF,kBAAM,4BAAU,eAAc,cAAS,KAAK,aAAa,CAAC,MAA5B,mBAA+B,aAAa,UAAU,OAAO;AAC3F;AAAA,MACJ;AAEA,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AACA;AAAA,EACJ,SAAS,OAAY;AACjB,oCAAY,iCAAiC,OAAO,OAAO;AAAA,EAC/D;AACJ;",
  "names": ["axios"]
}
