{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceStatus.ts"],
  "sourcesContent": ["import type { MidasAquatemp } from '../main';\nimport { getUpdateDeviceStatusSUrl } from './endPoints';\nimport { saveValue } from './saveValue';\nimport { initStore } from './store';\nimport { updateDeviceDetails } from './updateDeviceDetails';\nimport { updateDeviceErrorMsg } from './updateDeviceOnError';\nimport { errorLogger } from './logging';\nimport { request } from './axios';\nimport { getHeaders } from './axiosParameter';\nimport type { DeviceStatus } from '../types/types';\nimport { noError } from './utils';\n\nexport async function updateDeviceStatus(adapter: MidasAquatemp): Promise<void> {\n    const store = initStore();\n    try {\n        const { token, device: deviceCode } = store;\n        if (token) {\n            const { sURL } = getUpdateDeviceStatusSUrl();\n\n            const { data } = await request<DeviceStatus>(\n                adapter,\n                sURL,\n                {\n                    device_code: deviceCode,\n                    deviceCode: deviceCode,\n                },\n                getHeaders(token),\n            );\n            if (!data || !noError(data.error_code)) {\n                store.resetOnErrorHandler();\n                return;\n            }\n\n            store.reachable = (data.object_result?.[0]?.status ?? data.objectResult?.[0]?.status) == 'ONLINE';\n\n            adapter.log.debug(`DeviceStatus: ${JSON.stringify(data)}`);\n\n            if (data?.object_result?.[0]?.is_fault || data?.objectResult?.[0]?.isFault) {\n                await saveValue({ key: 'error', value: true, stateType: 'boolean', adapter: adapter });\n                await updateDeviceDetails(adapter);\n                await updateDeviceErrorMsg(adapter);\n                return;\n            }\n            // kein Fehler\n            await saveValue({ key: 'error', value: false, stateType: 'boolean', adapter: adapter });\n            await saveValue({ key: 'errorMessage', value: '', stateType: 'string', adapter: adapter });\n            await saveValue({ key: 'errorCode', value: '', stateType: 'string', adapter: adapter });\n            await saveValue({ key: 'errorLevel', value: 0, stateType: 'number', adapter: adapter });\n            await updateDeviceDetails(adapter);\n            return;\n        }\n        store.resetOnErrorHandler();\n    } catch (error: any) {\n        errorLogger('Error in updateDeviceStatus', error, adapter);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAA0C;AAC1C,uBAA0B;AAC1B,mBAA0B;AAC1B,iCAAoC;AACpC,iCAAqC;AACrC,qBAA4B;AAC5B,mBAAwB;AACxB,4BAA2B;AAE3B,mBAAwB;AAExB,eAAsB,mBAAmB,SAAuC;AAZhF;AAaI,QAAM,YAAQ,wBAAU;AACxB,MAAI;AACA,UAAM,EAAE,OAAO,QAAQ,WAAW,IAAI;AACtC,QAAI,OAAO;AACP,YAAM,EAAE,KAAK,QAAI,4CAA0B;AAE3C,YAAM,EAAE,KAAK,IAAI,UAAM;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,UACI,aAAa;AAAA,UACb;AAAA,QACJ;AAAA,YACA,kCAAW,KAAK;AAAA,MACpB;AACA,UAAI,CAAC,QAAQ,KAAC,sBAAQ,KAAK,UAAU,GAAG;AACpC,cAAM,oBAAoB;AAC1B;AAAA,MACJ;AAEA,YAAM,cAAa,sBAAK,kBAAL,mBAAqB,OAArB,mBAAyB,WAAzB,aAAmC,gBAAK,iBAAL,mBAAoB,OAApB,mBAAwB,WAAW;AAEzF,cAAQ,IAAI,MAAM,iBAAiB,KAAK,UAAU,IAAI,CAAC,EAAE;AAEzD,YAAI,wCAAM,kBAAN,mBAAsB,OAAtB,mBAA0B,eAAY,wCAAM,iBAAN,mBAAqB,OAArB,mBAAyB,UAAS;AACxE,kBAAM,4BAAU,EAAE,KAAK,SAAS,OAAO,MAAM,WAAW,WAAW,QAAiB,CAAC;AACrF,kBAAM,gDAAoB,OAAO;AACjC,kBAAM,iDAAqB,OAAO;AAClC;AAAA,MACJ;AAEA,gBAAM,4BAAU,EAAE,KAAK,SAAS,OAAO,OAAO,WAAW,WAAW,QAAiB,CAAC;AACtF,gBAAM,4BAAU,EAAE,KAAK,gBAAgB,OAAO,IAAI,WAAW,UAAU,QAAiB,CAAC;AACzF,gBAAM,4BAAU,EAAE,KAAK,aAAa,OAAO,IAAI,WAAW,UAAU,QAAiB,CAAC;AACtF,gBAAM,4BAAU,EAAE,KAAK,cAAc,OAAO,GAAG,WAAW,UAAU,QAAiB,CAAC;AACtF,gBAAM,gDAAoB,OAAO;AACjC;AAAA,IACJ;AACA,UAAM,oBAAoB;AAAA,EAC9B,SAAS,OAAY;AACjB,oCAAY,+BAA+B,OAAO,OAAO;AAAA,EAC7D;AACJ;",
  "names": []
}
