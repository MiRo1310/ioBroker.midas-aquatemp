{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceStatus.ts"],
  "sourcesContent": ["import type { MidasAquatemp } from '../main';\r\nimport { getUpdateDeviceStatusSUrl } from './endPoints';\r\nimport { saveValue } from './saveValue';\r\nimport { initStore } from './store';\r\nimport { updateDeviceDetails } from './updateDeviceDetails';\r\nimport { updateDeviceErrorMsg } from './updateDeviceOnError';\r\nimport { errorLogger } from './logging';\r\nimport { request } from './axios';\r\nimport { getHeaders } from './axiosParameter';\r\nimport type { DeviceStatus } from '../types/types';\r\n\r\nexport async function updateDeviceStatus(adapter: MidasAquatemp): Promise<void> {\r\n    const store = initStore();\r\n    try {\r\n        const { token, device: deviceCode } = store;\r\n        if (token) {\r\n            const { sURL } = getUpdateDeviceStatusSUrl();\r\n\r\n            const { data, error } = await request<DeviceStatus>(\r\n                adapter,\r\n                sURL,\r\n                {\r\n                    device_code: deviceCode,\r\n                    deviceCode: deviceCode,\r\n                },\r\n                getHeaders(token),\r\n            );\r\n            if (!data || error) {\r\n                store.resetOnErrorHandler();\r\n                return;\r\n            }\r\n\r\n            store.reachable = (data.object_result?.[0]?.status ?? data.objectResult?.[0]?.status) == 'ONLINE';\r\n\r\n            adapter.log.debug(`DeviceStatus: ${JSON.stringify(data)}`);\r\n\r\n            if (data?.object_result?.[0]?.is_fault || data?.objectResult?.[0]?.isFault) {\r\n                await saveValue({ key: 'error', value: true, stateType: 'boolean', adapter: adapter });\r\n                await updateDeviceDetails(adapter);\r\n                await updateDeviceErrorMsg(adapter);\r\n                return;\r\n            }\r\n            // kein Fehler\r\n            await saveValue({ key: 'error', value: false, stateType: 'boolean', adapter: adapter });\r\n            await saveValue({ key: 'errorMessage', value: '', stateType: 'string', adapter: adapter });\r\n            await saveValue({ key: 'errorCode', value: '', stateType: 'string', adapter: adapter });\r\n            await saveValue({ key: 'errorLevel', value: 0, stateType: 'number', adapter: adapter });\r\n            await updateDeviceDetails(adapter);\r\n            return;\r\n        }\r\n        store.resetOnErrorHandler();\r\n    } catch (error: any) {\r\n        errorLogger('Error in updateDeviceStatus', error, adapter);\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAA0C;AAC1C,uBAA0B;AAC1B,mBAA0B;AAC1B,iCAAoC;AACpC,iCAAqC;AACrC,qBAA4B;AAC5B,mBAAwB;AACxB,4BAA2B;AAG3B,eAAsB,mBAAmB,SAAuC;AAXhF;AAYI,QAAM,YAAQ,wBAAU;AACxB,MAAI;AACA,UAAM,EAAE,OAAO,QAAQ,WAAW,IAAI;AACtC,QAAI,OAAO;AACP,YAAM,EAAE,KAAK,QAAI,4CAA0B;AAE3C,YAAM,EAAE,MAAM,MAAM,IAAI,UAAM;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,UACI,aAAa;AAAA,UACb;AAAA,QACJ;AAAA,YACA,kCAAW,KAAK;AAAA,MACpB;AACA,UAAI,CAAC,QAAQ,OAAO;AAChB,cAAM,oBAAoB;AAC1B;AAAA,MACJ;AAEA,YAAM,cAAa,sBAAK,kBAAL,mBAAqB,OAArB,mBAAyB,WAAzB,aAAmC,gBAAK,iBAAL,mBAAoB,OAApB,mBAAwB,WAAW;AAEzF,cAAQ,IAAI,MAAM,iBAAiB,KAAK,UAAU,IAAI,CAAC,EAAE;AAEzD,YAAI,wCAAM,kBAAN,mBAAsB,OAAtB,mBAA0B,eAAY,wCAAM,iBAAN,mBAAqB,OAArB,mBAAyB,UAAS;AACxE,kBAAM,4BAAU,EAAE,KAAK,SAAS,OAAO,MAAM,WAAW,WAAW,QAAiB,CAAC;AACrF,kBAAM,gDAAoB,OAAO;AACjC,kBAAM,iDAAqB,OAAO;AAClC;AAAA,MACJ;AAEA,gBAAM,4BAAU,EAAE,KAAK,SAAS,OAAO,OAAO,WAAW,WAAW,QAAiB,CAAC;AACtF,gBAAM,4BAAU,EAAE,KAAK,gBAAgB,OAAO,IAAI,WAAW,UAAU,QAAiB,CAAC;AACzF,gBAAM,4BAAU,EAAE,KAAK,aAAa,OAAO,IAAI,WAAW,UAAU,QAAiB,CAAC;AACtF,gBAAM,4BAAU,EAAE,KAAK,cAAc,OAAO,GAAG,WAAW,UAAU,QAAiB,CAAC;AACtF,gBAAM,gDAAoB,OAAO;AACjC;AAAA,IACJ;AACA,UAAM,oBAAoB;AAAA,EAC9B,SAAS,OAAY;AACjB,oCAAY,+BAA+B,OAAO,OAAO;AAAA,EAC7D;AACJ;",
  "names": []
}
