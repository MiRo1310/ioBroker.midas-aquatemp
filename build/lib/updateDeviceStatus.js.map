{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceStatus.ts"],
  "sourcesContent": ["import axios from 'axios';\r\nimport { saveValue } from './saveValue';\r\nimport { useStore } from './store';\r\nimport { updateDeviceDetails } from './updateDeviceDetails';\r\nimport { updateDeviceErrorMsg } from './updateDeviceOnError';\r\nconst store = useStore();\r\nexport async function updateDeviceStatus(): Promise<void> {\r\n    const { apiLevel, token, device: deviceCode, cloudURL } = store;\r\n    if (token) {\r\n        var sURL = \"\";\r\n\r\n        if (apiLevel < 3) {\r\n            sURL = cloudURL + '/app/device/getDeviceStatus.json';\r\n        } else {\r\n            sURL = cloudURL + '/app/device/getDeviceStatus';\r\n        }\r\n\r\n        const response = await axios.post(sURL, {\r\n            \"device_code\": deviceCode,\r\n            \"deviceCode\": deviceCode\r\n        }, {\r\n            headers: { \"x-token\": token },\r\n        })\r\n\r\n        if (parseInt(response.data.error_code) == 0) {\r\n\r\n            if (apiLevel < 3) {\r\n                if (response.data.object_result[\"is_fault\"] == true) {\r\n                    // TODO: Fehlerbeschreibung abrufen\r\n                    //clearValues();\r\n                    saveValue(\"error\", true, \"boolean\");\r\n                    const objDetails = updateDeviceDetails();\r\n\r\n                    updateDeviceErrorMsg();\r\n\r\n                } else {\r\n                    // kein Fehler\r\n                    saveValue(\"error\", false, \"boolean\");\r\n                    saveValue(\"errorMessage\", \"\", \"string\");\r\n                    saveValue(\"errorCode\", \"\", \"string\");\r\n                    saveValue(\"errorLevel\", 0, \"number\");\r\n                    updateDeviceDetails();\r\n\r\n                }\r\n            } else {\r\n                if (response.data.objectResult[\"is_fault\"] == true) {\r\n                    // TODO: Fehlerbeschreibung abrufen\r\n                    //clearValues();\r\n                    saveValue(\"error\", true, \"boolean\");\r\n                    updateDeviceDetails();\r\n                    updateDeviceErrorMsg();\r\n\r\n\r\n                } else {\r\n                    // kein Fehler\r\n                    saveValue(\"error\", false, \"boolean\");\r\n                    saveValue(\"errorMessage\", \"\", \"string\");\r\n                    saveValue(\"errorCode\", \"\", \"string\");\r\n                    saveValue(\"errorLevel\", 0, \"number\");\r\n                    updateDeviceDetails();\r\n\r\n                }\r\n            }\r\n        } else {\r\n            // log(\"Fehler in updateDeviceStatus(): \" + JSON.stringify(response.data), \"error\");\r\n\r\n            saveValue(\"info.connection\", false, \"boolean\");\r\n\r\n\r\n        }\r\n    }\r\n    store.token = \"\",\r\n        store.device = \"\",\r\n        store.reachable = false\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,uBAA0B;AAC1B,mBAAyB;AACzB,iCAAoC;AACpC,iCAAqC;AACrC,MAAM,YAAQ,uBAAS;AACvB,eAAsB,qBAAoC;AACtD,QAAM,EAAE,UAAU,OAAO,QAAQ,YAAY,SAAS,IAAI;AAC1D,MAAI,OAAO;AACP,QAAI,OAAO;AAEX,QAAI,WAAW,GAAG;AACd,aAAO,WAAW;AAAA,IACtB,OAAO;AACH,aAAO,WAAW;AAAA,IACtB;AAEA,UAAM,WAAW,MAAM,aAAAA,QAAM,KAAK,MAAM;AAAA,MACpC,eAAe;AAAA,MACf,cAAc;AAAA,IAClB,GAAG;AAAA,MACC,SAAS,EAAE,WAAW,MAAM;AAAA,IAChC,CAAC;AAED,QAAI,SAAS,SAAS,KAAK,UAAU,KAAK,GAAG;AAEzC,UAAI,WAAW,GAAG;AACd,YAAI,SAAS,KAAK,cAAc,UAAU,KAAK,MAAM;AAGjD,0CAAU,SAAS,MAAM,SAAS;AAClC,gBAAM,iBAAa,gDAAoB;AAEvC,+DAAqB;AAAA,QAEzB,OAAO;AAEH,0CAAU,SAAS,OAAO,SAAS;AACnC,0CAAU,gBAAgB,IAAI,QAAQ;AACtC,0CAAU,aAAa,IAAI,QAAQ;AACnC,0CAAU,cAAc,GAAG,QAAQ;AACnC,8DAAoB;AAAA,QAExB;AAAA,MACJ,OAAO;AACH,YAAI,SAAS,KAAK,aAAa,UAAU,KAAK,MAAM;AAGhD,0CAAU,SAAS,MAAM,SAAS;AAClC,8DAAoB;AACpB,+DAAqB;AAAA,QAGzB,OAAO;AAEH,0CAAU,SAAS,OAAO,SAAS;AACnC,0CAAU,gBAAgB,IAAI,QAAQ;AACtC,0CAAU,aAAa,IAAI,QAAQ;AACnC,0CAAU,cAAc,GAAG,QAAQ;AACnC,8DAAoB;AAAA,QAExB;AAAA,MACJ;AAAA,IACJ,OAAO;AAGH,sCAAU,mBAAmB,OAAO,SAAS;AAAA,IAGjD;AAAA,EACJ;AACA,QAAM,QAAQ,IACV,MAAM,SAAS,IACf,MAAM,YAAY;AAC1B;",
  "names": ["axios"]
}
