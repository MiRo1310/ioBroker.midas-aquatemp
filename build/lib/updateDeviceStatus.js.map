{
  "version": 3,
  "sources": ["../../src/lib/updateDeviceStatus.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport { MidasAquatemp } from '../main';\nimport { getUpdateDeviceStatusSUrl } from './endPoints';\nimport { saveValue } from './saveValue';\nimport { initStore } from './store';\nimport { updateDeviceDetails } from './updateDeviceDetails';\nimport { updateDeviceErrorMsg } from './updateDeviceOnError';\n\nlet _this: MidasAquatemp;\n\nexport async function updateDeviceStatus(): Promise<void> {\n    const store = initStore();\n    try {\n        if (!_this) {\n            _this = MidasAquatemp.getInstance();\n        }\n        const { token, device: deviceCode, apiLevel } = store;\n        if (token) {\n            const { sURL } = getUpdateDeviceStatusSUrl();\n\n            const response = await axios.post(\n                sURL,\n                {\n                    device_code: deviceCode,\n                    deviceCode: deviceCode,\n                },\n                {\n                    headers: { 'x-token': token },\n                },\n            );\n\n            store.reachable =\n                apiLevel < 3\n                    ? response.data.object_result[0]?.device_status == 'ONLINE'\n                    : response.data.objectResult[0]?.deviceStatus == 'ONLINE';\n\n            if (parseInt(response.data.error_code) == 0) {\n                if (response.data?.object_result?.is_fault || response.data?.objectResult?.isFault) {\n                    store._this.log.error(`Error in updateDeviceStatus(): ${JSON.stringify(response.data)}`);\n                    // TODO: Fehlerbeschreibung abrufen\n                    //clearValues();\n                    await saveValue('error', true, 'boolean');\n                    await updateDeviceDetails();\n                    await updateDeviceErrorMsg();\n                    return;\n                }\n                // kein Fehler\n                await saveValue('error', false, 'boolean');\n                await saveValue('errorMessage', '', 'string');\n                await saveValue('errorCode', '', 'string');\n                await saveValue('errorLevel', 0, 'number');\n                await updateDeviceDetails();\n\n                return;\n            }\n            store.resetOnErrorHandler();\n            return;\n        }\n        store.resetOnErrorHandler();\n    } catch (error: any) {\n        store._this.log.error(JSON.stringify(error));\n        store._this.log.error(JSON.stringify(error.stack));\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,kBAA8B;AAC9B,uBAA0C;AAC1C,uBAA0B;AAC1B,mBAA0B;AAC1B,iCAAoC;AACpC,iCAAqC;AAErC,IAAI;AAEJ,eAAsB,qBAAoC;AAV1D;AAWI,QAAM,YAAQ,wBAAU;AACxB,MAAI;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,0BAAc,YAAY;AAAA,IACtC;AACA,UAAM,EAAE,OAAO,QAAQ,YAAY,SAAS,IAAI;AAChD,QAAI,OAAO;AACP,YAAM,EAAE,KAAK,QAAI,4CAA0B;AAE3C,YAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,QACzB;AAAA,QACA;AAAA,UACI,aAAa;AAAA,UACb;AAAA,QACJ;AAAA,QACA;AAAA,UACI,SAAS,EAAE,WAAW,MAAM;AAAA,QAChC;AAAA,MACJ;AAEA,YAAM,YACF,WAAW,MACL,cAAS,KAAK,cAAc,CAAC,MAA7B,mBAAgC,kBAAiB,aACjD,cAAS,KAAK,aAAa,CAAC,MAA5B,mBAA+B,iBAAgB;AAEzD,UAAI,SAAS,SAAS,KAAK,UAAU,KAAK,GAAG;AACzC,cAAI,oBAAS,SAAT,mBAAe,kBAAf,mBAA8B,eAAY,oBAAS,SAAT,mBAAe,iBAAf,mBAA6B,UAAS;AAChF,gBAAM,MAAM,IAAI,MAAM,kCAAkC,KAAK,UAAU,SAAS,IAAI,CAAC,EAAE;AAGvF,oBAAM,4BAAU,SAAS,MAAM,SAAS;AACxC,oBAAM,gDAAoB;AAC1B,oBAAM,iDAAqB;AAC3B;AAAA,QACJ;AAEA,kBAAM,4BAAU,SAAS,OAAO,SAAS;AACzC,kBAAM,4BAAU,gBAAgB,IAAI,QAAQ;AAC5C,kBAAM,4BAAU,aAAa,IAAI,QAAQ;AACzC,kBAAM,4BAAU,cAAc,GAAG,QAAQ;AACzC,kBAAM,gDAAoB;AAE1B;AAAA,MACJ;AACA,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AACA,UAAM,oBAAoB;AAAA,EAC9B,SAAS,OAAY;AACjB,UAAM,MAAM,IAAI,MAAM,KAAK,UAAU,KAAK,CAAC;AAC3C,UAAM,MAAM,IAAI,MAAM,KAAK,UAAU,MAAM,KAAK,CAAC;AAAA,EACrD;AACJ;",
  "names": ["axios"]
}
