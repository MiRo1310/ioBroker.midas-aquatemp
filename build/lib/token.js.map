{
  "version": 3,
  "sources": ["../../src/lib/token.ts"],
  "sourcesContent": ["import { getOptionsAndSUrl } from './endPoints';\r\nimport { initStore as useStore } from './store';\r\nimport { updateDeviceID } from './updateDeviceId';\r\nimport { updateDeviceStatus } from './updateDeviceStatus';\r\nimport { errorLogger } from './logging';\r\nimport type { MidasAquatemp } from '../main';\r\nimport { request } from './axios';\r\nimport type { RequestToken } from '../types/types';\r\nimport { isToken } from './utils';\r\n\r\nasync function getToken(adapter: MidasAquatemp): Promise<void> {\r\n    const store = useStore();\r\n\r\n    try {\r\n        const { token } = store;\r\n\r\n        if (isToken(token)) {\r\n            return;\r\n        }\r\n\r\n        adapter.log.debug('Request token');\r\n        const { sUrl, options } = getOptionsAndSUrl();\r\n\r\n        const { data, error } = await request<RequestToken>(adapter, sUrl, options);\r\n\r\n        if (error || !data) {\r\n            adapter.log.error(`Login-error: ${JSON.stringify(data)}`);\r\n            store.resetOnErrorHandler();\r\n            return;\r\n        }\r\n        store.token = data?.object_result?.['x-token'] ?? data?.objectResult?.['x-token'] ?? null;\r\n\r\n        if (store.token) {\r\n            adapter.log.debug('Login ok! Token');\r\n        } else {\r\n            adapter.log.error(`Login-error: ${JSON.stringify(data)}`);\r\n        }\r\n    } catch (error) {\r\n        errorLogger('Error in getToken', error, adapter);\r\n    }\r\n}\r\n\r\nexport const updateToken = async (adapter: MidasAquatemp): Promise<void> => {\r\n    const store = useStore();\r\n    try {\r\n        await getToken(adapter);\r\n\r\n        if (!store.token) {\r\n            store.resetOnErrorHandler();\r\n            return;\r\n        }\r\n        if (store.useDeviceMac) {\r\n            await updateDeviceStatus(adapter);\r\n            return;\r\n        }\r\n        await updateDeviceID(adapter);\r\n        return;\r\n    } catch (error: any) {\r\n        errorLogger('Error in updateToken', error, adapter);\r\n    }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkC;AAClC,mBAAsC;AACtC,4BAA+B;AAC/B,gCAAmC;AACnC,qBAA4B;AAE5B,mBAAwB;AAExB,mBAAwB;AAExB,eAAe,SAAS,SAAuC;AAV/D;AAWI,QAAM,YAAQ,aAAAA,WAAS;AAEvB,MAAI;AACA,UAAM,EAAE,MAAM,IAAI;AAElB,YAAI,sBAAQ,KAAK,GAAG;AAChB;AAAA,IACJ;AAEA,YAAQ,IAAI,MAAM,eAAe;AACjC,UAAM,EAAE,MAAM,QAAQ,QAAI,oCAAkB;AAE5C,UAAM,EAAE,MAAM,MAAM,IAAI,UAAM,sBAAsB,SAAS,MAAM,OAAO;AAE1E,QAAI,SAAS,CAAC,MAAM;AAChB,cAAQ,IAAI,MAAM,gBAAgB,KAAK,UAAU,IAAI,CAAC,EAAE;AACxD,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AACA,UAAM,SAAQ,8CAAM,kBAAN,mBAAsB,eAAtB,aAAoC,kCAAM,iBAAN,mBAAqB,eAAzD,YAAuE;AAErF,QAAI,MAAM,OAAO;AACb,cAAQ,IAAI,MAAM,iBAAiB;AAAA,IACvC,OAAO;AACH,cAAQ,IAAI,MAAM,gBAAgB,KAAK,UAAU,IAAI,CAAC,EAAE;AAAA,IAC5D;AAAA,EACJ,SAAS,OAAO;AACZ,oCAAY,qBAAqB,OAAO,OAAO;AAAA,EACnD;AACJ;AAEO,MAAM,cAAc,OAAO,YAA0C;AACxE,QAAM,YAAQ,aAAAA,WAAS;AACvB,MAAI;AACA,UAAM,SAAS,OAAO;AAEtB,QAAI,CAAC,MAAM,OAAO;AACd,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AACA,QAAI,MAAM,cAAc;AACpB,gBAAM,8CAAmB,OAAO;AAChC;AAAA,IACJ;AACA,cAAM,sCAAe,OAAO;AAC5B;AAAA,EACJ,SAAS,OAAY;AACjB,oCAAY,wBAAwB,OAAO,OAAO;AAAA,EACtD;AACJ;",
  "names": ["useStore"]
}
