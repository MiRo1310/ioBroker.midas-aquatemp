{
  "version": 3,
  "sources": ["../../src/lib/token.ts"],
  "sourcesContent": ["import axios from 'axios';\r\nimport { getOptionsAndSUrl } from './endPoints';\r\nimport { initStore as useStore } from './store';\r\nimport { updateDeviceID } from './updateDeviceId';\r\nimport { updateDeviceStatus } from './updateDeviceStatus';\r\nimport { errorLogger } from './logging';\r\n\r\nasync function getToken(): Promise<void> {\r\n    const store = useStore();\r\n    const _this = store._this;\r\n    try {\r\n        const { token, apiLevel } = store;\r\n\r\n        if (!token) {\r\n            _this.log.debug('Request token');\r\n            const { sUrl, options } = getOptionsAndSUrl();\r\n\r\n            const response = await axios.post(sUrl, options);\r\n            if (!response) {\r\n                _this.log.error('No response from server');\r\n                return;\r\n            }\r\n            if (response.status == 200) {\r\n                store.token =\r\n                    apiLevel < 3\r\n                        ? response.data?.object_result?.['x-token']\r\n                        : (store.token = response.data?.objectResult?.['x-token']);\r\n                if (store.token) {\r\n                    _this.log.debug('Login ok! Token');\r\n                } else {\r\n                    _this.log.error(`Login-error: ${JSON.stringify(response.data)}`);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            _this.log.error(`Login-error: ${response.data}`);\r\n            store.resetOnErrorHandler();\r\n            return;\r\n        }\r\n    } catch (error) {\r\n        errorLogger('Error in getToken', error, store._this);\r\n    }\r\n}\r\n\r\nexport const updateToken = async (): Promise<void> => {\r\n    const store = useStore();\r\n    try {\r\n        await getToken();\r\n\r\n        if (!store.token) {\r\n            store.resetOnErrorHandler();\r\n            return;\r\n        }\r\n        if (store.useDeviceMac) {\r\n            await updateDeviceStatus();\r\n            return;\r\n        }\r\n        await updateDeviceID();\r\n        return;\r\n    } catch (error: any) {\r\n        errorLogger('Error in updateToken', error, store._this);\r\n    }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,uBAAkC;AAClC,mBAAsC;AACtC,4BAA+B;AAC/B,gCAAmC;AACnC,qBAA4B;AAE5B,eAAe,WAA0B;AAPzC;AAQI,QAAM,YAAQ,aAAAA,WAAS;AACvB,QAAM,QAAQ,MAAM;AACpB,MAAI;AACA,UAAM,EAAE,OAAO,SAAS,IAAI;AAE5B,QAAI,CAAC,OAAO;AACR,YAAM,IAAI,MAAM,eAAe;AAC/B,YAAM,EAAE,MAAM,QAAQ,QAAI,oCAAkB;AAE5C,YAAM,WAAW,MAAM,aAAAC,QAAM,KAAK,MAAM,OAAO;AAC/C,UAAI,CAAC,UAAU;AACX,cAAM,IAAI,MAAM,yBAAyB;AACzC;AAAA,MACJ;AACA,UAAI,SAAS,UAAU,KAAK;AACxB,cAAM,QACF,WAAW,KACL,oBAAS,SAAT,mBAAe,kBAAf,mBAA+B,aAC9B,MAAM,SAAQ,oBAAS,SAAT,mBAAe,iBAAf,mBAA8B;AACvD,YAAI,MAAM,OAAO;AACb,gBAAM,IAAI,MAAM,iBAAiB;AAAA,QACrC,OAAO;AACH,gBAAM,IAAI,MAAM,gBAAgB,KAAK,UAAU,SAAS,IAAI,CAAC,EAAE;AAAA,QACnE;AAEA;AAAA,MACJ;AAEA,YAAM,IAAI,MAAM,gBAAgB,SAAS,IAAI,EAAE;AAC/C,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AAAA,EACJ,SAAS,OAAO;AACZ,oCAAY,qBAAqB,OAAO,MAAM,KAAK;AAAA,EACvD;AACJ;AAEO,MAAM,cAAc,YAA2B;AAClD,QAAM,YAAQ,aAAAD,WAAS;AACvB,MAAI;AACA,UAAM,SAAS;AAEf,QAAI,CAAC,MAAM,OAAO;AACd,YAAM,oBAAoB;AAC1B;AAAA,IACJ;AACA,QAAI,MAAM,cAAc;AACpB,gBAAM,8CAAmB;AACzB;AAAA,IACJ;AACA,cAAM,sCAAe;AACrB;AAAA,EACJ,SAAS,OAAY;AACjB,oCAAY,wBAAwB,OAAO,MAAM,KAAK;AAAA,EAC1D;AACJ;",
  "names": ["useStore", "axios"]
}
