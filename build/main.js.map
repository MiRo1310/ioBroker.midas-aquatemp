{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an\nimport { initStore } from './lib/store';\n\nimport * as utils from '@iobroker/adapter-core';\nimport { createObjects } from './lib/createState';\nimport { encryptPassword } from './lib/encryptPassword';\nimport { setupEndpoints } from './lib/endPoints';\nimport { saveValue } from './lib/saveValue';\n\nimport { updateToken } from './lib/token';\n\nimport { updateDevicePower } from './lib/updateDevicePower';\nimport { updateDeviceSetTemp } from './lib/updateDeviceSetTemp';\nimport { updateDeviceSilent } from './lib/updateDeviceSilent';\nimport { isStateValue } from './lib/utils';\nimport { errorLogger } from './lib/logging';\n\nlet updateInterval: ioBroker.Interval | undefined;\nlet tokenRefreshTimer: ioBroker.Interval | undefined;\n\nexport class MidasAquatemp extends utils.Adapter {\n    private static instance: MidasAquatemp;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'midas-aquatemp',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        MidasAquatemp.instance = this;\n    }\n    public static getInstance(): MidasAquatemp {\n        return MidasAquatemp.instance;\n    }\n\n    private async onReady(): Promise<void> {\n        const store = initStore();\n        const adapter = this;\n        store.adapter = this;\n        store.instance = this.instance;\n\n        const dpRoot = store.getDpRoot();\n        await this.setState('info.connection', false, true);\n\n        store.username = this.config.username;\n        const password = this.config.password;\n        store.interval = this.config.refresh;\n        store.apiLevel = this.config.selectApi;\n        if (this.config.useDeviceMac) {\n            store.device = this.config.deviceMac;\n        }\n\n        store.useDeviceMac = this.config.useDeviceMac;\n        this.log.debug(`API-Level: ${this.config.selectApi}`);\n\n        setupEndpoints();\n\n        encryptPassword(password);\n        await createObjects(adapter);\n        this.log.info('Objects created');\n        await clearValues();\n        await updateToken(adapter);\n\n        async function clearValues(): Promise<void> {\n            await saveValue({ key: 'error', value: true, stateType: 'boolean', adapter });\n            await saveValue({ key: 'consumption', value: 0, stateType: 'number', adapter });\n            await saveValue({ key: 'state', value: false, stateType: 'boolean', adapter });\n            await saveValue({ key: 'rawJSON', value: null, stateType: 'string', adapter });\n        }\n\n        updateInterval = this.setInterval(async () => {\n            try {\n                await updateToken(adapter);\n                const mode = await this.getStateAsync(`${dpRoot}.mode`);\n\n                if (!mode?.ack && mode?.val) {\n                    await updateDevicePower(adapter, store.device, mode.val as number);\n                }\n                const silent = await this.getStateAsync(`${dpRoot}.silent`);\n                if (!silent?.ack && silent?.val) {\n                    await updateDevicePower(adapter, store.device, silent.val as number);\n                }\n            } catch (error: any) {\n                errorLogger('Error in updateInterval', error, adapter);\n            }\n        }, store.interval * 1000);\n\n        tokenRefreshTimer = this.setInterval(async function () {\n            store.token = '';\n            await updateToken(adapter);\n        }, 3600000);\n\n        this.on('stateChange', async (id, state) => {\n            try {\n                if (!state || state.ack) {\n                    return;\n                }\n                if (id === `${dpRoot}.mode`) {\n                    this.log.debug(`Mode: ${JSON.stringify(state)}`);\n                    if (isStateValue(state)) {\n                        const mode = parseInt(state.val as string);\n                        await updateDevicePower(adapter, store.device, mode);\n                    }\n                    await this.setState(id, { ack: true });\n                }\n\n                if (id === `${dpRoot}.silent`) {\n                    this.log.debug(`Silent: ${JSON.stringify(state)}`);\n                    if (isStateValue(state)) {\n                        await updateDeviceSilent(adapter, store.device, state.val as boolean);\n                    }\n                    await this.setState(id, { ack: true });\n                }\n\n                if (id === `${dpRoot}.tempSet`) {\n                    this.log.debug(`TempSet: ${JSON.stringify(state)}`);\n\n                    if (isStateValue(state)) {\n                        await updateDeviceSetTemp(adapter, store.device, state.val as number);\n                    }\n                    await this.setState(id, { ack: true });\n                }\n            } catch (error: any) {\n                errorLogger(`Error in stateChange for ${id}`, error, adapter);\n            }\n        });\n\n        await this.subscribeStatesAsync(`${dpRoot}.mode`);\n        await this.subscribeStatesAsync(`${dpRoot}.silent`);\n        await this.subscribeStatesAsync(`${dpRoot}.tempSet`);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback Callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.clearInterval(updateInterval);\n            this.clearInterval(tokenRefreshTimer);\n\n            callback();\n        } catch (e: any) {\n            callback();\n            this.log.error(`Error: ${e.message}`);\n        }\n    }\n}\nlet adapter;\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    adapter = (options: Partial<utils.AdapterOptions> | undefined): MidasAquatemp => new MidasAquatemp(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MidasAquatemp())();\n}\nexport { adapter };\n"],
  "mappings": "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",
  "names": ["adapter"]
}
