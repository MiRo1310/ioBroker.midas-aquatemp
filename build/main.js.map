{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.3\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an\r\nimport { initStore } from './lib/store';\r\n\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport { createObjects } from './lib/createState';\r\nimport { encryptPassword } from './lib/encryptPassword';\r\nimport { setupEndpoints } from './lib/endPoints';\r\nimport { saveValue } from './lib/saveValue';\r\n\r\nimport { updateToken } from './lib/token';\r\n\r\nimport { updateDevicePower } from './lib/updateDevicePower';\r\nimport { updateDeviceSetTemp } from './lib/updateDeviceSetTemp';\r\nimport { updateDeviceSilent } from './lib/updateDeviceSilent';\r\nimport { isStateValue } from './lib/utils';\r\nimport { errorLogger } from './lib/logging';\r\n\r\nlet updateInterval: ioBroker.Interval | undefined;\r\nlet tokenRefreshTimer: ioBroker.Interval | undefined;\r\n\r\nexport class MidasAquatemp extends utils.Adapter {\r\n    private static instance: MidasAquatemp;\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'midas-aquatemp',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n        MidasAquatemp.instance = this;\r\n    }\r\n    public static getInstance(): MidasAquatemp {\r\n        return MidasAquatemp.instance;\r\n    }\r\n\r\n    private async onReady(): Promise<void> {\r\n        const store = initStore();\r\n        const adapter = this;\r\n        store.adapter = this;\r\n        store.instance = this.instance;\r\n\r\n        const dpRoot = store.getDpRoot();\r\n        await this.setState('info.connection', false, true);\r\n\r\n        store.username = this.config.username;\r\n        const password = this.config.password;\r\n        store.interval = this.config.refresh;\r\n        store.apiLevel = this.config.selectApi;\r\n        if (this.config.useDeviceMac) {\r\n            store.device = this.config.deviceMac;\r\n        }\r\n\r\n        store.useDeviceMac = this.config.useDeviceMac;\r\n        this.log.debug(`API-Level: ${this.config.selectApi}`);\r\n\r\n        setupEndpoints();\r\n\r\n        encryptPassword(password);\r\n        await createObjects(adapter);\r\n        this.log.info('Objects created');\r\n        await clearValues();\r\n        await updateToken(adapter);\r\n\r\n        async function clearValues(): Promise<void> {\r\n            await saveValue({ key: 'error', value: true, stateType: 'boolean', adapter });\r\n            await saveValue({ key: 'consumption', value: 0, stateType: 'number', adapter });\r\n            await saveValue({ key: 'state', value: false, stateType: 'boolean', adapter });\r\n            await saveValue({ key: 'rawJSON', value: null, stateType: 'string', adapter });\r\n        }\r\n\r\n        updateInterval = this.setInterval(async () => {\r\n            try {\r\n                await updateToken(adapter);\r\n                const mode = await this.getStateAsync(`${dpRoot}.mode`);\r\n\r\n                if (!mode?.ack && mode?.val && store.device) {\r\n                    await updateDevicePower(adapter, store.device, mode.val as number);\r\n                }\r\n                const silent = await this.getStateAsync(`${dpRoot}.silent`);\r\n                if (!silent?.ack && silent?.val && store.device) {\r\n                    await updateDevicePower(adapter, store.device, silent.val as number);\r\n                }\r\n            } catch (error: any) {\r\n                errorLogger('Error in updateInterval', error, adapter);\r\n            }\r\n        }, store.interval * 1000);\r\n\r\n        tokenRefreshTimer = this.setInterval(async function () {\r\n            store.token = '';\r\n            await updateToken(adapter);\r\n        }, 3600000);\r\n\r\n        this.on('stateChange', async (id, state) => {\r\n            try {\r\n                if (!state || state.ack) {\r\n                    return;\r\n                }\r\n                if (id === `${dpRoot}.mode` && store.device) {\r\n                    this.log.debug(`Mode: ${JSON.stringify(state)}`);\r\n                    if (isStateValue(state)) {\r\n                        const mode = parseInt(state.val as string);\r\n                        await updateDevicePower(adapter, store.device, mode);\r\n                    }\r\n                    await this.setState(id, { ack: true });\r\n                }\r\n\r\n                if (id === `${dpRoot}.silent` && store.device) {\r\n                    this.log.debug(`Silent: ${JSON.stringify(state)}`);\r\n                    if (isStateValue(state)) {\r\n                        await updateDeviceSilent(adapter, store.device, state.val as boolean);\r\n                    }\r\n                    await this.setState(id, { ack: true });\r\n                }\r\n\r\n                if (id === `${dpRoot}.tempSet` && store.device) {\r\n                    this.log.debug(`TempSet: ${JSON.stringify(state)}`);\r\n\r\n                    if (isStateValue(state)) {\r\n                        await updateDeviceSetTemp(adapter, store.device, state.val as number);\r\n                    }\r\n                    await this.setState(id, { ack: true });\r\n                }\r\n            } catch (error: any) {\r\n                errorLogger(`Error in stateChange for ${id}`, error, adapter);\r\n            }\r\n        });\r\n\r\n        await this.subscribeStatesAsync(`${dpRoot}.mode`);\r\n        await this.subscribeStatesAsync(`${dpRoot}.silent`);\r\n        await this.subscribeStatesAsync(`${dpRoot}.tempSet`);\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     *\r\n     * @param callback Callback\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            this.clearInterval(updateInterval);\r\n            this.clearInterval(tokenRefreshTimer);\r\n\r\n            callback();\r\n        } catch (e: any) {\r\n            callback();\r\n            this.log.error(`Error: ${e.message}`);\r\n        }\r\n    }\r\n}\r\nlet adapter;\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    adapter = (options: Partial<utils.AdapterOptions> | undefined): MidasAquatemp => new MidasAquatemp(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new MidasAquatemp())();\r\n}\r\nexport { adapter };\r\n"],
  "mappings": "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",
  "names": ["adapter"]
}
